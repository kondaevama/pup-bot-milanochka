import asyncio
import json
import random
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher, types, F
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.filters import Command
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
import os

# === –ö–û–ù–§–ò–ì ===
BOT_TOKEN = os.getenv('BOT_TOKEN')
MASHA_ID = 390005162
MILANA_ID = 436264598
DATA_FILE = 'data.json'

# === –ü–£–ü–´ ===
PUP_IMAGES = {
    'happy': 'https://raw.githubusercontent.com/kondaevama/pup-bot-milanochka/refs/heads/main/pup_happy.webp',
    'sad': 'https://raw.githubusercontent.com/kondaevama/pup-bot-milanochka/refs/heads/main/pup_sad.webp',
    'surprise': 'https://raw.githubusercontent.com/kondaevama/pup-bot-milanochka/refs/heads/main/pup_surprise.webp',
    'love': 'https://raw.githubusercontent.com/kondaevama/pup-bot-milanochka/refs/heads/main/up_love.webp'
}

# === –§–†–ê–ó–´ ===
PRAISE = ["–£–º–Ω–∏—Ü–∞, –ú–∏–ª–∞–Ω–æ—á–∫–∞! ‚òÄÔ∏è", "–¢—ã –ø—Ä–æ—Å—Ç–æ –≤–æ–ª—à–µ–±–Ω–∏—Ü–∞, –ú–∏–ª–∞–Ω–æ—á–∫–∞! ‚ú®", "–ú–æ—è –ª—é–±–∏–º–∞—è —Å–∞–¥–æ–≤–Ω–∏—Ü–∞! üå∏"]
WATER_REMS = ["—à–µ–ø—á–µ—Ç: ¬´–ú–Ω–µ –±—ã –≥–ª–æ—Ç–æ—á–µ–∫ –≤–æ–¥–∏—á–∫–∏...¬ª üíß", "—Ç–∏—Ö–æ –Ω–∞–º–µ–∫–∞–µ—Ç: ¬´–ê –Ω–µ –ø–æ—Ä–∞ –ª–∏ –ø–æ–ø–∏—Ç—å?¬ª üí¶", "–Ω–µ–∂–Ω–æ –ø—Ä–æ—Å–∏—Ç: ¬´–ß—É—Ç–æ—á–∫—É –≤–æ–¥—ã, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞?¬ª üå±"]
FUN_FACTS = ["–ì–µ—Ä–∞–Ω—å –æ—á–∏—â–∞–µ—Ç –≤–æ–∑–¥—É—Ö –∏ –ø–æ–º–æ–≥–∞–µ—Ç —Å–ø–∞—Ç—å —Å–ø–æ–∫–æ–π–Ω–æ. üíï", "–ì–µ—Ä–∞–Ω–∏ –æ—Ç–ø—É–≥–∏–≤–∞—é—Ç –∫–æ–º–∞—Ä–æ–≤! ü¶∏‚Äç‚ôÄÔ∏è", "–ì–µ—Ä–∞–Ω–∏ ‚Äî –ø—É—Ç–µ—à–µ—Å—Ç–≤–µ–Ω–Ω–∏—Ü—ã –∏–∑ –ê—Ñ—Ä–∏–∫–∏, –Ω–æ –ø–æ–ª—é–±–∏–ª–∏ —Ç–≤–æ–π –¥–æ–º–∏–∫! üåç"]
LEVELS = [(0, "–†–æ—Å—Ç–æ—á–µ–∫ üå±"), (10, "–ì–æ—Å–ø–æ–∂–∞ –õ–µ–π–∫–∞ üíß"), (30, "–õ–µ–ø–µ—Å—Ç–æ—á–µ–∫ üå∏"), (60, "–•—Ä–∞–Ω–∏—Ç–µ–ª—å–Ω–∏—Ü–∞ —Ü–≤–µ—Ç–µ–Ω–∏—è üåø"), (100, "–¶–≤–µ—Ç–æ—á–Ω–∞—è —Ñ–µ—è üå∑")]

# === –°–û–°–¢–û–Ø–ù–ò–Ø ===
class Form(StatesGroup):
    waiting_photo1 = State()
    waiting_name1 = State()
    waiting_photo2 = State()
    waiting_name2 = State()
    lesson_light = State()
    lesson_water = State()

# === –ë–û–¢ ===
bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher(storage=MemoryStorage())

# === –î–ê–ù–ù–´–ï ===
def load_data():
    try:
        with open(DATA_FILE, 'r', encoding='utf-8') as f:
            return json.load(f)
    except:
        return {"plants": {}, "milanochka": {"level": "–†–æ—Å—Ç–æ—á–µ–∫ üå±", "xp_total": 0, "petals": 0}}

def save_data(data):
    with open(DATA_FILE, 'w', encoding='utf-8') as f:
        json.dump(data, f, ensure_ascii=False, indent=4)

def get_level(xp):
    for thresh, name in reversed(LEVELS):
        if xp >= thresh:
            return name
    return "–†–æ—Å—Ç–æ—á–µ–∫ üå±"

# === –û–¢–ü–†–ê–í–ö–ê –° –ü–£–ü–û–ú ===
async def send_pup(chat_id, text, image='happy', reply_markup=None):
    try:
        await bot.send_photo(chat_id, PUP_IMAGES[image], caption=text, reply_markup=reply_markup)
    except:
        await bot.send_message(chat_id, text, reply_markup=reply_markup)

# === /start ===
@dp.message(Command("start"))
async def start(message: types.Message, state: FSMContext):
    if message.from_user.id != MILANA_ID:
        return
    data = load_data()
    await send_pup(MILANA_ID, "–ü—Ä–∏–≤–µ—Ç, –ú–∏–ª–∞–Ω–æ—á–∫–∞! –ú–µ–Ω—è –∑–æ–≤—É—Ç –ü—É–ø! üå∏<br>–ú–µ–Ω—è —Å–æ–∑–¥–∞–ª–∞ –ú–∞—à–∫–∞, —á—Ç–æ–±—ã —è –ø–æ–º–æ–≥–∞–ª —Å —Ü–≤–µ—Ç–æ—á–∫–∞–º–∏ üåø<br>–ü—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ –ø–µ—Ä–≤–æ–≥–æ —Ü–≤–µ—Ç–∫–∞ (–∏–∑ –≥–æ—Å—Ç–∏–Ω–æ–π)!", 'love')
    await state.set_state(Form.waiting_photo1)

# === –§–û–¢–û 1 ===
@dp.message(Form.waiting_photo1, F.photo)
async def photo1(message: types.Message, state: FSMContext):
    await send_pup(MILANA_ID, "–û–≥–æ, –∫–∞–∫–æ–π –∫—Ä–∞—Å–∏–≤—ã–π! –ê –∫–∞–∫ –µ–≥–æ –∑–æ–≤—É—Ç? üå∑", 'surprise')
    await state.update_data(photo1=message.photo[-1].file_id)
    await state.set_state(Form.waiting_name1)

@dp.message(Form.waiting_name1)
async def name1(message: types.Message, state: FSMContext):
    data = load_data()
    user_data = await state.get_data()
    name = message.text.strip()
    data["plants"][name] = {"last_water": None, "photo": user_data["photo1"]}
    save_data(data)
    await send_pup(MILANA_ID, f"–¢–µ–ø–µ—Ä—å {name} –ø–æ–¥ –º–æ–µ–π –æ–ø–µ–∫–æ–π! üíß<br>–ü—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ –≤—Ç–æ—Ä–æ–≥–æ —Ü–≤–µ—Ç–∫–∞!", 'happy')
    await state.set_state(Form.waiting_photo2)

# === –§–û–¢–û 2 ===
@dp.message(Form.waiting_photo2, F.photo)
async def photo2(message: types.Message, state: FSMContext):
    await send_pup(MILANA_ID, "–í–∞—É! –ê –∏–º—è? üå∫", 'surprise')
    await state.update_data(photo2=message.photo[-1].file_id)
    await state.set_state(Form.waiting_name2)

@dp.message(Form.waiting_name2)
async def name2(message: types.Message, state: FSMContext):
    data = load_data()
    user_data = await state.get_data()
    name = message.text.strip()
    data["plants"][name] = {"last_water": None, "photo": user_data["photo2"]}
    save_data(data)
    await send_pup(MILANA_ID, f"–£—Ä–∞! {name} —Ç–æ–∂–µ —Å –Ω–∞–º–∏! üåø<br>–¢–µ–ø–µ—Ä—å —É—Ä–æ–∫: –≥–¥–µ —Å—Ç–∞–≤–∏—Ç—å —Ü–≤–µ—Ç—ã? ‚òÄÔ∏è", 'love')
    await state.set_state(Form.lesson_light)

# === –£–†–û–ö–ò ===
@dp.message(Form.lesson_light)
async def lesson_light(message: types.Message, state: FSMContext):
    data = load_data()
    data["milanochka"]["xp_total"] += 5
    data["milanochka"]["level"] = get_level(data["milanochka"]["xp_total"])
    save_data(data)
    await send_pup(MILANA_ID, random.choice(PRAISE) + "<br>–¶–≤–µ—Ç—ã –ª—é–±—è—Ç —Å–≤–µ—Ç, –Ω–æ –Ω–µ –ø—Ä—è–º–æ–µ —Å–æ–ª–Ω—Ü–µ! üåû<br>–¢–µ–ø–µ—Ä—å ‚Äî –ø–æ–ª–∏–≤! üíß", 'happy')
    await state.set_state(Form.lesson_water)

@dp.message(Form.lesson_water)
async def lesson_water(message: types.Message, state: FSMContext):
    data = load_data()
    data["milanochka"]["xp_total"] += 5
    data["milanochka"]["petals"] += 1
    save_data(data)
    await send_pup(MILANA_ID, "–ü–æ–ª–∏–≤–∞–π, –∫–æ–≥–¥–∞ –∑–µ–º–ª—è —Å—É—Ö–∞—è –Ω–∞ 2 —Å–º! üí¶<br>–¢—ã –ø–æ–ª—É—á–∏–ª–∞ +1 –ª–µ–ø–µ—Å—Ç–æ–∫! üå∏", 'happy')
    if data["milanochka"]["petals"] >= 12:
        await bot.send_message(MASHA_ID, "–ú–∏–ª–∞–Ω–æ—á–∫–∞ —Å–æ–±—Ä–∞–ª–∞ 12 –ª–µ–ø–µ—Å—Ç–∫–æ–≤! –°—Ä–æ—á–Ω–æ –±–µ–≥–∏ ‚Äî —Å—é—Ä–ø—Ä–∏–∑! üéâ")
    await state.clear()

# === –ù–ê–ü–û–ú–ò–ù–ê–ù–ò–Ø –û –ü–û–õ–ò–í–ï ===
async def water_reminders():
    while True:
        await asyncio.sleep(7200)  # –∫–∞–∂–¥—ã–µ 2 —á–∞—Å–∞
        data = load_data()
        now = datetime.now()
        for name, plant in data["plants"].items():
            if plant["last_water"] is None or (now - datetime.fromisoformat(plant["last_water"])).days >= 3:
                await send_pup(MILANA_ID, f"{name} {random.choice(WATER_REMS)}", 'sad')
                break
        if random.random() < 0.1:
            await send_pup(MILANA_ID, random.choice(FUN_FACTS), 'happy')

# === –£–¢–†–ï–ù–ù–ò–ï/–í–ï–ß–ï–†–ù–ò–ï ===
async def daily_greeting():
    while True:
        now = datetime.now()
        if 8 <= now.hour <= 10 and now.minute == 0:
            await send_pup(MILANA_ID, "–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ, –ú–∏–ª–∞–Ω–æ—á–∫–∞! ‚òÄÔ∏è –ù–æ–≤—ã–π –¥–µ–Ω—å ‚Äî –Ω–æ–≤—ã–µ –ª–∏—Å—Ç–æ—á–∫–∏!", 'happy')
        if 20 <= now.hour <= 22 and now.minute == 0:
            await send_pup(MILANA_ID, "–°–ø–æ–∫–æ–π–Ω–æ–π –Ω–æ—á–∏, –ú–∏–ª–∞–Ω–æ—á–∫–∞! üåô –¶–≤–µ—Ç–æ—á–∫–∏ —Å–ø—è—Ç –∏ —à–µ–ø—á—É—Ç '—Å–ø–∞—Å–∏–±–æ' üíö", 'love')
        await asyncio.sleep(60)

# === –°–¢–ê–†–¢ ===
async def main():
    asyncio.create_task(water_reminders())
    asyncio.create_task(daily_greeting())
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())
